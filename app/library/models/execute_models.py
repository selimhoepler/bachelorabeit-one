import datetime
import time
import pandas as pd
from collections import defaultdict 


def models_execute(
        input_models: dict,
        data_in,
        identifier,
        selection,
        multivar_labels=None,
        do_print=False,
        ) -> dict:
    """
    Runs all models present in input_models.

    Args:
    input_models (dict): All models that should be run.
    data_in (DataFrame): data on which the models should perform TSNE.
    identifier (int): interval_identifier
    selection (str): selection identifier
    do_print (bool): print debug info when true

    Returns:
    tsne_data for all different models, selections and intervals
    """

    print(f'[GENERATE][ENTER] models_execute() ({identifier})')
    models = {}
    model_keys = []
    for key in input_models:
        model_key = '{}_{}_{}'.format(selection, key, identifier)
        print(f'[INFO] Model key: {model_key}')
        if do_print:
            print(model_key)
        model = input_models[key]['model']
        models[model_key] = {'model': model}
        
        print(f'[INFO] executing model: {model}')
        print(f'[INFO] processing the following data: {data_in}')

        start_time = time.time()
        models[model_key]['tsne_data'] = model.fit_transform(data_in)  #tsne result data for visualization
        end_time = time.time()

        models[model_key]['time'] = end_time - start_time

        if multivar_labels is not None:
            models[model_key]['ids'] = multivar_labels
        else:
            models[model_key]['ids'] = data_in.index.values

        models[model_key]['tsne'] = pd.DataFrame(
            data=models[model_key]['tsne_data'],
            index=models[model_key]['ids'],
            columns=['dim1', 'dim2'])
        test = models[model_key]['tsne'] #test_code test = pandas dataframe
        model_keys.append(model_key)
        print(f'[INFO] Model keys: {model_keys}')
    # print model timings
    if do_print:
        print('\nTimings:')
        for key in models:
            print('{}: {}'.format(
                key,
                str(datetime.timedelta(seconds=models[key]['time']))
                ))
        print('--------------------------')

    return models, model_keys


def execute(
        models,
        data_dict,
        interval_list,
        affected_side='both_affected',
        multivar_labels=None,
        do_print=False,
        leg='both'
        ) -> dict:
    """
    Executes all models provided by models for all intervals.

    Args:
    tsne_models (dict): Contains all models generated by create_tsne_models()
    data_dict (dict): Contains all data generated by create_all_data()
    interval_list (list): List containing the intervals of the subsampled data.

    Returns:
    dict: Containing the tsne_output for all models.
    """
    print(f'[GENERATE][ENTER] execute()')
    results = {}
    single_result = defaultdict(dict)
    model_key_list = []
    test = pd.DataFrame()
    for key in data_dict:
        print(f'[INFO] Key: {key}')
        for interval in interval_list:
            print(f'[INFO] Interval: {interval}')  # Keine Umwandlung in eine Liste notwendig
            print(f'[INFO] Side dictionary:\n {data_dict[key][str(interval)]}')  # Keine Umwandlung in eine Liste notwendig
            print(f'[INFO] Type of data: {type(data_dict[key][str(interval)]["left_affected"])}')
            print(f'[INFO] Data inside left_affected: {data_dict[key][str(interval)]["left_affected"]}')
            if 'both' in leg:
                single_result, model_key = (models_execute(    #NORMALEWEISE: test_result.update( models_execute()
                        models,
                        data_dict[key][str(interval)]['both_affected'].dropna(),
                        '_{:02d}'.format(interval),
                        key,
                        do_print=False,
                        multivar_labels=multivar_labels
                        )
                )
                results.update(single_result)
                model_key_list.append(model_key)
                #test_code
            else:
                results.update(
                    models_execute(
                        models,
                        pd.concat(
                            [
                                data_dict[key][str(interval)]['left_affected'].dropna(),
                                data_dict[key][str(interval)]['right_affected'].dropna()
                            ]
                        ),
                        '_{:02d}'.format(interval),
                        key,
                        do_print=False,
                        multivar_labels=multivar_labels
                        )
                    )
                
    print(f'[GENERATE][EXIT] execute()') 
    return results, model_key_list


